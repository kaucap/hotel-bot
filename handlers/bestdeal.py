import datetime
import re
from json import JSONDecodeError

from aiogram import types
from aiogram_calendar import DialogCalendar, dialog_cal_callback
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import MediaGroup, ReplyKeyboardRemove, CallbackQuery
from loguru import logger

from db_api import sql_commands as command
from hotel_requests import get_id_city, get_hotel_info_bestdeal, send_hotels_without_photo, set_hotels_with_photos
from keyboard.default import photo_hotel_necessity
from loader import dp
from states import BestDeal


@logger.catch()
@dp.message_handler(Command("bestdeal"))
async def choose_city(message: types.Message):
    logger.info(f'–ö–ª–∏–µ–Ω—Ç —Å id: {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /bestdeal')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')
    await BestDeal.city.set()


@logger.catch()
@dp.message_handler(state=BestDeal.city)
async def choose_price(message: types.Message, state: FSMContext):
    answer = message.text
    if re.search(r'\d', answer) is None:
        special_symbols = re.compile("|".join(map(re.escape, "@.,:;^‚Ññ!?_*+()/#¬§%&)"))).search
        if not bool(special_symbols(answer)):
            await state.update_data(city=answer)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö –∑–∞ –Ω–æ—á—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø—Ä–∏–º–µ—Ä: 3000 5000')
            await BestDeal.price.set()
        else:
            await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õîÔ∏è \n–ì–æ—Ä–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            await BestDeal.city.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ì–æ—Ä–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await BestDeal.city.set()


@logger.catch()
@dp.message_handler(state=BestDeal.price)
async def choose_distance(message: types.Message, state: FSMContext):
    answer = message.text
    list_of_prices = answer.split()
    if len(list_of_prices) == 2:
        if list_of_prices[0].isdigit() and list_of_prices[1].isdigit():
            start_price = int(list_of_prices[0])
            finish_price = int(list_of_prices[1])
            if start_price > finish_price:
                await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π, '
                                     '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
                await BestDeal.price
            elif start_price == finish_price:
                await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏, '
                                     '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            else:
                await state.update_data(start_price=start_price)
                await state.update_data(finish_price=finish_price)
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç–µ–ª—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤ –∫–º, –ø—Ä–∏–º–µ—Ä: 0.3 1.5')
                await BestDeal.distance.set()
        else:
            await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            await BestDeal.price.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await BestDeal.price.set()


@logger.catch()
@dp.message_handler(state=BestDeal.distance)
async def choose_date(message: types.Message, state: FSMContext):
    answer = message.text
    list_of_distances = answer.split()
    if len(list_of_distances) == 2:
        start_distance = list_of_distances[0]
        finish_distance = list_of_distances[1]
        if start_distance.isdigit() or finish_distance.isdigit() or re.findall(r"\d*\.\d+", start_distance) \
                or re.findall(r"\d*\.\d+", finish_distance):
            if start_distance > finish_distance:
                await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ, '
                                     '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
                await BestDeal.distance.set()
            else:
                await state.update_data(start_distance=start_distance)
                await state.update_data(finish_distance=finish_distance)
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞",
                                     reply_markup=await DialogCalendar().start_calendar())
                await BestDeal.date_of_entry.set()
        else:
            await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            await BestDeal.distance.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await BestDeal.distance.set()


@logger.catch()
@dp.callback_query_handler(dialog_cal_callback.filter(), state=BestDeal.date_of_entry)
async def date_of_entry_finish(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'–î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ {date.strftime("%d/%m/%Y")}'
        )
        await state.update_data(date_of_entry=datetime.datetime.strptime(date.strftime("%Y%m%d"), "%Y%m%d").date())
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞",
                                            reply_markup=await DialogCalendar().start_calendar())
        await BestDeal.departure_date.set()


@logger.catch()
@dp.callback_query_handler(dialog_cal_callback.filter(), state=BestDeal.departure_date)
async def departure_date(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ {date.strftime("%d/%m/%Y")}'
        )
        await state.update_data(departure_date=datetime.datetime.strptime(date.strftime("%Y%m%d"), "%Y%m%d").date())

        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ '
                                            '–ø–æ–∫–∞–∑–∞—Ç—å (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 25)')
        await BestDeal.quantity_hotels.set()


@logger.catch()
@dp.message_handler(state=BestDeal.quantity_hotels)
async def if_need_photo(message: types.Message, state: FSMContext):
    answer = message.text
    if re.search(r'\D', answer):
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await BestDeal.quantity_hotels.set()
    elif 1 <= int(answer) <= 25:
        await state.update_data(quantity_hotels=answer)
        await message.answer('–ù—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?', reply_markup=photo_hotel_necessity)
        await BestDeal.photo.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await BestDeal.quantity_hotels.set()


@logger.catch()
@dp.message_handler(state=BestDeal.photo)
async def result(message: types.Message, state: FSMContext):
    answer = message.text
    if '–ù–µ—Ç' in answer:
        await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–∏—Å–∫—É üîé', reply_markup=ReplyKeyboardRemove())
        logger.info("–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /bestdeal")
        try:
            data = await state.get_data()
            days_quantity = (data['departure_date'] - data['date_of_entry']).days
            city_id = await get_id_city(data)
            hotels_information = await get_hotel_info_bestdeal(data, city_id)

            if len(hotels_information) == 0:
                await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å '
                                     '–∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                                     '/bestdeal')
                await state.reset_state()
            else:
                for index in range(len(hotels_information)):
                    await send_hotels_without_photo(hotels_information=hotels_information, index=index, command=command,
                                                    days_quantity=days_quantity, message=message)

                await state.reset_state()
                await message.answer('–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /help')
        except JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ JSONDecodeError")
            await message.answer('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n'
                                 '–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /lowprice')
            await state.reset_state()
        except TypeError:
            logger.error("–û—à–∏–±–∫–∞ TypeError")
            await message.answer('–í —Ö–æ–¥–µ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n'
                                 '–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /lowprice')
            await state.reset_state()
    elif '–î–∞' in answer:
        await state.update_data(photo_need=answer)
        await message.answer('–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=ReplyKeyboardRemove())
        await BestDeal.quantity_photo.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        await BestDeal.photo.set()


@logger.catch()
@dp.message_handler(state=BestDeal.quantity_photo)
async def result(message: types.Message, state: FSMContext):
    answer = message.text
    if answer.isdigit() is False:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        await BestDeal.quantity_photo.set()
    elif answer == '0':
        await message.answer('–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await BestDeal.quantity_photo.set()
    else:
        await state.update_data(photo_quantity=answer)
        await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–∏—Å–∫—É üîé')
        logger.info("–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /bestdeal")
        try:
            data = await state.get_data()
            days_quantity = (data['departure_date'] - data['date_of_entry']).days
            city_id = await get_id_city(data)
            hotels_information = await get_hotel_info_bestdeal(data, city_id)
            if len(hotels_information) == 0:
                await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å '
                                     '–∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                                     '/bestdeal')
                await state.reset_state()
            else:
                for index in range(len(hotels_information)):
                    await set_hotels_with_photos(MediaGroup=MediaGroup, command=command, data=data,
                                                 days_quantity=days_quantity, hotels_information=hotels_information,
                                                 index=index, message=message)

            await state.reset_state()
            await message.answer('–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /help')
        except JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ JSONDecodeError")
            await message.answer('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n'
                                 '–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /bestdeal')
            await state.reset_state()
        except TypeError:
            logger.error("–û—à–∏–±–∫–∞ TypeError")
            await message.answer('–í —Ö–æ–¥–µ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n'
                                 '–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /bestdeal')
            await state.reset_state()
