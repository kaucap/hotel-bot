import datetime
import re
from json import JSONDecodeError

from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import MediaGroup, ReplyKeyboardRemove, CallbackQuery
from loguru import logger
from aiogram_calendar import DialogCalendar, dialog_cal_callback

from db_api import sql_commands as command
from hotel_requests import get_id_city, get_hotel_info_expensive, send_hotels_without_photo, set_hotels_with_photos
from keyboard.default import photo_hotel_necessity
from loader import dp
from states import HighPrice


@logger.catch()
@dp.message_handler(Command("highprice"))
async def choose_city(message: types.Message):
    logger.info(f'–ö–ª–∏–µ–Ω—Ç —Å id: {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /highprice')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')
    await HighPrice.city.set()


@logger.catch()
@dp.message_handler(state=HighPrice.city)
async def date_of_entry(message: types.Message, state: FSMContext):
    answer = message.text
    if re.search(r'\d', answer) is None:
        special_symbols = re.compile("|".join(map(re.escape, "@.,:;^‚Ññ!?_*+()/#¬§%&)"))).search
        if not bool(special_symbols(answer)):
            await state.update_data(city=answer)
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞",
                                 reply_markup=await DialogCalendar().start_calendar())
            await HighPrice.date_of_entry.set()
        else:
            await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õîÔ∏è \n–ì–æ—Ä–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            await HighPrice.city.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ì–æ—Ä–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await HighPrice.city.set()


@logger.catch()
@dp.callback_query_handler(dialog_cal_callback.filter(), state=HighPrice.date_of_entry)
async def date_of_entry_finish(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'–î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ {date.strftime("%d/%m/%Y")}'
        )
        await state.update_data(date_of_entry=datetime.datetime.strptime(date.strftime("%Y%m%d"), "%Y%m%d").date())
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞",
                                            reply_markup=await DialogCalendar().start_calendar())
        await HighPrice.departure_date.set()


@logger.catch()
@dp.callback_query_handler(dialog_cal_callback.filter(), state=HighPrice.departure_date)
async def departure_date(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ {date.strftime("%d/%m/%Y")}'
        )
        await state.update_data(departure_date=datetime.datetime.strptime(date.strftime("%Y%m%d"), "%Y%m%d").date())

        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ '
                                            '–ø–æ–∫–∞–∑–∞—Ç—å (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 25)')
        await HighPrice.quantity_hotels.set()


@logger.catch()
@dp.message_handler(state=HighPrice.quantity_hotels)
async def if_need_photo(message: types.Message, state: FSMContext):
    answer = message.text
    if re.search(r'\D', answer):
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        await HighPrice.quantity_hotels.set()
    elif 1 <= int(answer) <= 25:
        await state.update_data(quantity_hotels=answer)
        await message.answer('–ù—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?', reply_markup=photo_hotel_necessity)
        await HighPrice.photo.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25')
        await HighPrice.quantity_hotels.set()


@logger.catch()
@dp.message_handler(state=HighPrice.photo)
async def result(message: types.Message, state: FSMContext):
    answer = message.text
    if '–ù–µ—Ç' in answer:
        await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–∏—Å–∫—É üîé', reply_markup=ReplyKeyboardRemove())
        logger.info("–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /highprice")
        try:
            data = await state.get_data()
            days_quantity = (data['departure_date'] - data['date_of_entry']).days
            city_id = await get_id_city(data)
            hotels_information = await get_hotel_info_expensive(data, city_id)

            for index in range(len(hotels_information)):
                await send_hotels_without_photo(hotels_information=hotels_information, index=index, command=command,
                                                days_quantity=days_quantity, message=message)

            await state.reset_state()
            await message.answer('–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /help')
        except JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ JSONDecodeError")
            await message.answer('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n'
                                 '–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /highprice')
            await state.reset_state()
        except TypeError:
            logger.error("–û—à–∏–±–∫–∞ TypeError")
            await message.answer('–í —Ö–æ–¥–µ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n'
                                 '–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /highprice')
            await state.reset_state()

    elif '–î–∞' in answer:
        await state.update_data(photo_need=answer)
        await message.answer('–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=ReplyKeyboardRemove())
        await HighPrice.quantity_photo.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        await HighPrice.photo.set()


@logger.catch()
@dp.message_handler(state=HighPrice.quantity_photo)
async def result(message: types.Message, state: FSMContext):
    answer = message.text
    if answer.isdigit() is False:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        await HighPrice.quantity_photo.set()
    elif answer == '0':
        await message.answer('–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await HighPrice.quantity_photo.set()
    else:
        await state.update_data(photo_quantity=answer)
        await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–∏—Å–∫—É üîé')
        logger.info("–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /highprice")
        try:
            data = await state.get_data()
            days_quantity = (data['departure_date'] - data['date_of_entry']).days
            city_id = await get_id_city(data)
            hotels_information = await get_hotel_info_expensive(data, city_id)

            for index in range(len(hotels_information)):
                await set_hotels_with_photos(MediaGroup=MediaGroup, command=command, data=data,
                                             days_quantity=days_quantity, hotels_information=hotels_information,
                                             index=index, message=message)

            await state.reset_state()
            await message.answer('–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /help')
        except JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ JSONDecodeError")
            await message.answer('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n'
                                 '–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /highprice')
            await state.reset_state()
        except TypeError:
            logger.error("–û—à–∏–±–∫–∞ TypeError")
            await message.answer('–í —Ö–æ–¥–µ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n'
                                 '–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /highprice')
            await state.reset_state()
