import re
from json import JSONDecodeError

from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import MediaGroup, ReplyKeyboardRemove
from aiogram_calendar import DialogCalendar
from loguru import logger

from db_api import sql_commands as command
from hotel_requests import get_id_city, get_hotel_info_bestdeal, send_hotels_without_photo, set_hotels_with_photos
from states import BestDeal
from utils.common import json_decode_error, type_error


async def check_special_symbols(symbol_information: dict):
    answer = symbol_information['answer']
    state = symbol_information['state']
    current_state = symbol_information['current_state']
    message = symbol_information['message']

    special_symbols = re.compile("|".join(map(re.escape, "@.,:;^‚Ññ!?_*+()/#¬§%&)"))).search
    if not bool(special_symbols(answer)):
        await state.update_data(city=answer)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö –∑–∞ –Ω–æ—á—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø—Ä–∏–º–µ—Ä: 3000 5000')
        await current_state.price.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õîÔ∏è \n–ì–æ—Ä–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await current_state.city.set()


async def check_entered_city(city_information: dict):
    answer = city_information['answer']
    state = city_information['state']
    message = city_information['message']
    current_state = city_information['current_state']

    if re.search(r'\d', answer) is None:
        symbol_information = {'message': message, 'state': state, 'current_state': current_state, 'answer': answer}
        await check_special_symbols(symbol_information=symbol_information)
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ì–æ—Ä–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await current_state.city.set()


async def user_input_distance_from_center(acquired_information: dict):
    state = acquired_information['state']
    start_price = acquired_information['start_price']
    finish_price = acquired_information['finish_price']
    message = acquired_information['message']

    await state.update_data(start_price=start_price)
    await state.update_data(finish_price=finish_price)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç–µ–ª—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤ –∫–º, –ø—Ä–∏–º–µ—Ä: 0.3 1.5')
    await BestDeal.distance.set()


async def check_price_difference(price_information: dict):
    start_price = int(price_information['start_price'])
    finish_price = int(price_information['finish_price'])
    message = price_information['message']
    state = price_information['state']

    if start_price > finish_price:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π, '
                             '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await BestDeal.price
    elif start_price == finish_price:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏, '
                             '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    else:
        acquired_information = {'state': state, 'message': message, 'start_price': start_price,
                                'finish_price': finish_price}
        await user_input_distance_from_center(acquired_information)


async def check_entered_prices(price_information: dict):
    start_price = price_information['start_price']
    finish_price = price_information['finish_price']
    message = price_information['message']

    if start_price.isdigit() and finish_price.isdigit():
        await check_price_difference(price_information=price_information)
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await BestDeal.price.set()


async def check_entered_distances(distance_information: dict):
    start_distance = distance_information['start_distance']
    finish_distance = distance_information['finish_distance']
    message = distance_information['message']
    state = distance_information['state']

    if start_distance.isdigit() or finish_distance.isdigit() or re.findall(r"\d*\.\d+", start_distance) \
            or re.findall(r"\d*\.\d+", finish_distance):
        if start_distance > finish_distance:
            await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ, '
                                 '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            await BestDeal.distance.set()
        else:
            await state.update_data(start_distance=start_distance)
            await state.update_data(finish_distance=finish_distance)
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞",
                                 reply_markup=await DialogCalendar().start_calendar())
            await BestDeal.date_of_entry.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await BestDeal.distance.set()


async def check_if_have_hotels_without_photos(search_information: dict):
    hotels_information = search_information['hotels_information']
    message = search_information['message']
    state = search_information['state']
    days_quantity = search_information['days_quantity']

    if len(hotels_information) == 0:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å '
                             '–∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                             '/bestdeal')
        await state.reset_state()
    else:
        for index in range(len(hotels_information)):
            await send_hotels_without_photo(hotels_information=hotels_information, index=index, command=command,
                                            days_quantity=days_quantity, message=message)

        await state.reset_state()
        await message.answer('–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /help')


async def send_info_to_user_without_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    days_quantity = (data['departure_date'] - data['date_of_entry']).days
    city_id = await get_id_city(data)
    hotels_information = await get_hotel_info_bestdeal(data, city_id)
    search_information = {'hotels_information': hotels_information, 'days_quantity': days_quantity,
                          'message': message, 'state': state}
    await check_if_have_hotels_without_photos(search_information=search_information)


async def send_results_without_photo(message: types.Message, state: FSMContext):
    await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–∏—Å–∫—É üîé', reply_markup=ReplyKeyboardRemove())
    logger.info("–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /bestdeal")
    try:
        await send_info_to_user_without_photo(state=state, message=message)
    except JSONDecodeError:
        error_information = {'message': message, 'state': state, 'current_command': 'bestdeal'}
        await json_decode_error(error_information=error_information)
    except TypeError:
        error_information = {'message': message, 'state': state, 'current_command': 'bestdeal'}
        await type_error(error_information=error_information)


async def check_if_have_hotels_with_photos(search_information: dict):
    hotels_information = search_information['hotels_information']
    message = search_information['message']
    state = search_information['state']
    days_quantity = search_information['days_quantity']
    data = search_information['data']

    if len(hotels_information) == 0:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å '
                             '–∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                             '/bestdeal')
        await state.reset_state()
    else:
        for index in range(len(hotels_information)):
            await set_hotels_with_photos(MediaGroup=MediaGroup, command=command, data=data,
                                         days_quantity=days_quantity, hotels_information=hotels_information,
                                         index=index, message=message)

    await state.reset_state()
    await message.answer('–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /help')


async def send_info_to_user_with_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    days_quantity = (data['departure_date'] - data['date_of_entry']).days
    city_id = await get_id_city(data)
    hotels_information = await get_hotel_info_bestdeal(data, city_id)
    search_information = {'hotels_information': hotels_information, 'days_quantity': days_quantity,
                          'message': message, 'state': state, 'data': data}
    await check_if_have_hotels_with_photos(search_information=search_information)


async def send_results_with_photo(message: types.Message, state: FSMContext, answer: str):
    await state.update_data(photo_quantity=answer)
    await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–∏—Å–∫—É üîé')
    logger.info("–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /bestdeal")
    try:
        await send_info_to_user_with_photos(state=state, message=message)
    except JSONDecodeError:
        error_information = {'message': message, 'state': state, 'current_command': 'bestdeal'}
        await json_decode_error(error_information=error_information)
    except TypeError:
        error_information = {'message': message, 'state': state, 'current_command': 'bestdeal'}
        await type_error(error_information=error_information)
